import 'package:dance_sf/widgets/add_event_widgets/description_section.dart';
import 'package:flutter/material.dart';
import 'package:dance_sf/controllers/event_controller.dart';
import 'package:dance_sf/controllers/event_instance_controller.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../widgets/add_event_widgets/location_section.dart';
import '../widgets/add_event_widgets/upload_section.dart';
import '../widgets/add_event_widgets/time_section.dart';
import '../widgets/add_event_widgets/cost_section.dart';
import '../widgets/add_event_widgets/tickets_section.dart';
import '../widgets/add_event_widgets/date_field.dart';
import '../models/event_model.dart';

class AddEventInstanceScreen extends ConsumerStatefulWidget {
  final String eventId;
  const AddEventInstanceScreen({required this.eventId, super.key});

  @override
  ConsumerState<AddEventInstanceScreen> createState() => _AddEventInstanceScreenState();
}

class _AddEventInstanceScreenState extends ConsumerState<AddEventInstanceScreen> {
  final _formKey = GlobalKey<FormState>();
  late EventInstance _eventInstance;
  bool _isLoading = true;
  DateTime? _selectedDate;

  @override
  void initState() {
    super.initState();
    _loadEvent();
  }

  Future<void> _loadEvent() async {
    try {
      final event = await EventController.fetchEvent(widget.eventId);
      if (event != null && mounted) {
        setState(() {
          // Create a new event instance with default values from the event
          _eventInstance = EventInstance(
            eventInstanceId: '', // Will be set by the database
            event: event,
            date: DateTime.now(), // Default to today, will be updated by user
            shortUrl: '', // Will be generated by the database
          );
          _selectedDate = DateTime.now();
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading event: $e')),
        );
      }
    }
  }

  Future<void> _handleCreate() async {
    if (_formKey.currentState!.validate() && _selectedDate != null) {
      try {
        // Update the event instance with the selected date
        _eventInstance = _eventInstance.copyWith(date: _selectedDate!);

        // Create the event instance using the controller
        await EventInstanceController.createEventInstance(_eventInstance);

        if (mounted) {
          context.pop();
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error creating event instance: $e')),
          );
        }
      }
    } else if (_selectedDate == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a date for the event instance')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        title: const Text('Add Event Instance'),
        centerTitle: true,
        elevation: 0,
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            DateField(
              date: _selectedDate ?? DateTime.now(),
              onDateChanged: (date) => setState(() {
                _selectedDate = date;
              }),
            ),
            const SizedBox(height: 20),
            TimeSection(
              startTime: _eventInstance.startTime,
              endTime: _eventInstance.endTime,
              onStartTimeChanged: (time) => setState(() {
                if (time != null) {
                  _eventInstance = _eventInstance.copyWith(startTime: time);
                }
              }),
              onEndTimeChanged: (time) => setState(() {
                if (time != null) {
                  _eventInstance = _eventInstance.copyWith(endTime: time);
                }
              }),
            ),
            const SizedBox(height: 20),
            CostSection(
              initialCost: _eventInstance.cost,
              onCostChanged: (cost) => setState(() {
                _eventInstance = _eventInstance.copyWith(cost: cost);
              }),
              validator: (value) {
                if (value == null || value.isEmpty) return null;
                if (double.tryParse(value) == null) {
                  return 'Please enter a valid number';
                }
                return null;
              },
            ),
            const SizedBox(height: 20),
            LocationSection(
              location: Location(
                venueName: _eventInstance.venueName,
                city: _eventInstance.city,
                url: _eventInstance.url,
              ),
              onLocationChanged: (newLocation) => setState(() {
                _eventInstance = _eventInstance.copyWith(
                  venueName: newLocation.venueName,
                  city: newLocation.city,
                  url: newLocation.url,
                );
              }),
            ),
            const SizedBox(height: 20),
            TicketsSection(
              initialTicketLinks: _eventInstance.event.linkToEvents,
              onTicketLinksChanged: (links) => setState(() {
                _eventInstance = _eventInstance.copyWith(linkToEvents: links);
              }),
            ),
            const SizedBox(height: 20),
            UploadSection(
              fileUrl: _eventInstance.flyerUrl,
              onFileChanged: (url) => setState(() {
                _eventInstance = _eventInstance.copyWith(flyerUrl: url);
              }),
            ),
            const SizedBox(height: 28),
            DescriptionSection(
              description: _eventInstance.description,
              onDescriptionChanged: (Map<String, String>? description) {
                setState(() {
                  _eventInstance = _eventInstance.copyWith(description: description);
                });
              },
            ),
            const SizedBox(height: 28),
            SizedBox(
              width: double.infinity,
              height: 48,
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Theme.of(context).colorScheme.primary,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                onPressed: _handleCreate,
                child: Text(
                  'Create Event Instance',
                  style: Theme.of(context).textTheme.labelLarge?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
